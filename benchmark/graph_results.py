import os
import argparse
import json
import matplotlib.pyplot as plt
from collections import defaultdict

def extract_data(input_files):
    data = defaultdict(dict)
    for input_file in input_files:
        file_data = dict()
        with open(input_file, "r") as file:
            file_data = json.load(file)

        for operation_type, map_data in file_data.items():
            for map_type, data_points in map_data.items():
                if map_type not in data[operation_type]:
                    data[operation_type][map_type] = []

                for data_point in data_points:
                    data[operation_type][map_type].append(data_point)

    return data

def plot_graphs(data):
    for operation_type, map_data in data.items():
        plt.figure()

        for map_type, data_points in map_data.items():
            x, y = [x for x, y in data_points], [y for x, y in data_points]
            print(x, y)
            plt.plot(x, y, label=map_type)

        plt.title(operation_type)
        plt.xscale('log')
        plt.xlabel('Map size')
        plt.ylabel(f'Average {operation_type} time (ns)')
        plt.legend()

    plt.show()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Graphically visualize benchmark data")
    parser.add_argument("--input_files", default=["results\\result.json"], type=str, help="Result files generated by auto_benchmark.py", nargs='+')
    args = parser.parse_args()

    dir_path = os.path.dirname(os.path.abspath(__file__))

    input_files = [os.path.join(dir_path, input_path) for input_path in args.input_files]
    data = extract_data(input_files)
    
    plot_graphs(data)
